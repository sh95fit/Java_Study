package JavaStudy01;

/*
 객체 지향 프로그래밍(OOP, Object Oriented Programming)
 - 부품 객체를 먼저 만들고 이것들을 하나씩 조립해 완성된 프로그램을 만드는 기법
 
 객체(Object)
 물리적으로 존재하는 모든 것
 추상적인 것 중에서 자신의 속성과 동작을 가지는 모든 것
 객체는 필드(속성)과 메소드(동작)로 구성된 자바 객체로 모델링 가능
 
 객체 간의 관계
 객체 지향 프로그램에서는 객체는 다른 객체와 관계를 맺음
 
 관계의 종류
 집합 관계 : 완성품과 부품의 관계  ex> 자동차와 엔진
 사용 관계 : 객체가 다른 객체를 사용하는 관계 ex> 사람과 자동차
 상속 관계 : 종류 객체와 구체적인 사물 객체의 관계 ex> 기계와 자동차
 
 객체 지향 프로그래밍의 특징!!
 1. 캡슐화
  - 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것
  - 외부 객체는 객체 내부 구조를 알지 못하며 객체가 노출해 제공하는 필드와 메소드만 이용 가능
  - 필드와 메소드를 캡슐화하여 보호하는 이유는 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하기 위함
  - 자바 언어는 캡슐화된 멤버를 노출시킬 것인지 숨길 것인지 결정하기 위해 접근 제한자(Access Modifier)를 사용
  - 프로그램 소스 간소화 / 잘못된 사용을 제한할 수 있다
 2. 상속
  - 상위(부모) 객체의 필드와 메소드를 하위(자식) 객체에게 물려주는 행위
  - 하위 객체는 상위 객체를 확장해서 추가적인 필드와 메소드를 가질 수 있음
  - 상속 대상 : 필드와 메소드
  - 상속의 효과
    1) 상위 객체를 재사용해서 하위 객체를 빨리 개발할 수 있음 (재사용성)
    2) 반복된 코드의 중복을 줄임 (중복 제거)
    3) 유지 보수의 편리성 제공 (유지보수 용이)
    4) 객체의 다형성 구현
 3. 다형성
  - 같은 타입이지만 실행 결과가 다양한 객체를 대입할 수 있는 성질
   : 부모 타입에는 모든 자식 객체가 대입
     인터페이스 타입에는 모든 구현 객체가 대입
  - 효과
   1) 객체를 부품화시키는 것이 가능
   2) 유지보수 용이
   
 객체와 클래스
 - 클래스에는 객체를 생성하기 위한 필드와 메소드가 정의된다
 - 클래스로부터 만들어진 객체를 해당 클래스의 인스턴스라 한다
 - 하나의 클래스로부터 여러 개의 인스턴스를 만들 수 있다
 - 클래스는 설계도이므로 실행을 하려면 객체(인스턴스)를 생성해야 한다

 클래스의 이름
 1. 하나 이상의 문자로 이루어져야하며 첫 글자는 대문자!
 2. 첫 번째 글자에는 숫자가 올 수 없다
 3. &, _ 외 특수문자를 쓸 수 없다
 4. 자바 키워드는 사용할 수 없다!
 보통 영문으로 이름을 작성하며, 대소문자를 구분한다!
 
 클래스의 선언과 컴파일
 소스 파일 하나당 클래스를 하나만 선언하는 것이 관례
 소스 파일 이름과 동일한 클래스만 public으로 선언 가능
 선언한 개수만큼 바이트 코드 파일 생성
 
 new 연산자
 - 객체 생성 역할
 - 형태 : new 클래스();
 - 클래스()는 생성자를 호출하는 코드
 - 생성된 객체는 힙 메모리 영역에 생성
 - new 연산자는 객체를 생성한 후, 객체 생성 번지 리턴
 
 클래스 변수
 - new 연산자에 의해 리턴된 객체의 번지 저장(참조타입 변수)
 - 힙 영역의 객체를 사용하기 위해 사용
 - ex> 클래스 변수; //변수만 생성
       변수 = new 클래스();  //생성자
       or 한번에 쓰는 형태 : 클래스 변수 = new 클래스();  //초기값 설정

 클래스의 용도
 라이브러리(API : Application Program Interface)용
 - 자체적으로 실행되지 않음
 - 다른 클래스에서 이용할 목적으로 만든 클래스
 실행용
 - main() 메소드를 가지고 있는 클래스로 실행할 목적으로 만든 클래스
 
 1개의 어플리케이션 = 1개의 실행 클래스 + n개의 라이브러리 클래스
 
 클래스의 구성 멤버
 1. 필드	: 객체에 데이터가 저장되는 곳(변수와 동일)/ 객체의 고유 데이터, 객체가 가져야할 부품 객체, 객체의 현재 상태 데이터
 2. 생성자 : 객체 생성시 초기화 역할 담당 / 클래스 이름과 동일!
 3. 메서드 : 객체의 동작에 해당하는 실행 블록
 */


// 사용자 정의 클래스 생성

public class Java17 {
	// Java17_1의 라이브러리용 클래스
	String company = "현대자동차";
	String model = "그랜저";
	String color = "검정";
	int maxSpeed = 250;
	int speed;

}
